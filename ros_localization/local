/* Generated by CIL v. 1.7.3 */
/* print_CIL_Input is false */

#line 61 "test_ekf_localization_node_interfaces.c"
#pragma pack(4)
#line 69
#pragma pack(4)
#line 77
#pragma pack(4)
#line 84
#pragma pack(4)
#line 91
#pragma pack(4)
#line 98
#pragma pack(4)
#line 106
#pragma pack(4)
#line 114
#pragma pack(4)
#line 122
#pragma pack(4)
#line 130
#pragma pack(4)
#line 131 "test_ekf_localization_node_interfaces.c"
struct nav_msgs_Odometry {
   double pose_position_x ;
   double pose_position_y ;
   double pose_position_z ;
   double pose_orientation_x ;
   double pose_orientation_y ;
   double pose_orientation_z ;
   double pose_orientation_w ;
   double pose_covariance[36] ;
   double twist_linear_x ;
   double twist_linear_y ;
   double twist_linear_z ;
   double twist_angular_x ;
   double twist_angular_y ;
   double twist_angular_z ;
   double twist_covariance[36] ;
   char *header_frame_id ;
   int header_stamp ;
   int header_seq ;
   char *child_frame_id ;
};
#line 131 "test_ekf_localization_node_interfaces.c"
typedef struct nav_msgs_Odometry nav_msgs_Odometry;
#line 165
#pragma pack(4)
#line 166 "test_ekf_localization_node_interfaces.c"
struct geometry_msgs_Pose {
   double pose_position_x ;
   double pose_position_y ;
   double pose_position_z ;
   double pose_orientation_x ;
   double pose_orientation_y ;
   double pose_orientation_z ;
   double pose_orientation_w ;
   double pose_covariance[36] ;
   double twist_linear_x ;
   double twist_linear_y ;
   double twist_linear_z ;
   double twist_angular_x ;
   double twist_angular_y ;
   double twist_angular_z ;
   double twist_covariance[36] ;
   char *header_frame_id ;
   int header_stamp ;
   int header_seq ;
   char *child_frame_id ;
};
#line 166 "test_ekf_localization_node_interfaces.c"
typedef struct geometry_msgs_Pose geometry_msgs_Pose;
#line 201
#pragma pack(4)
#line 202 "test_ekf_localization_node_interfaces.c"
struct geometry_msgs_Twist {
   double pose_position_x ;
   double pose_position_y ;
   double pose_position_z ;
   double pose_orientation_x ;
   double pose_orientation_y ;
   double pose_orientation_z ;
   double pose_orientation_w ;
   double pose_covariance[36] ;
   double twist_linear_x ;
   double twist_linear_y ;
   double twist_linear_z ;
   double twist_angular_x ;
   double twist_angular_y ;
   double twist_angular_z ;
   double twist_covariance[36] ;
   char *header_frame_id ;
   int header_stamp ;
   int header_seq ;
   char *child_frame_id ;
};
#line 202 "test_ekf_localization_node_interfaces.c"
typedef struct geometry_msgs_Twist geometry_msgs_Twist;
#line 237
#pragma pack(4)
#line 238 "test_ekf_localization_node_interfaces.c"
struct sensor_msgs_Imu_Pose {
   double orientation_x ;
   double orientation_y ;
   double orientation_z ;
   double orientation_w ;
   double orientation_covariance[9] ;
   char *header_frame_id ;
   int header_stamp ;
   int header_seq ;
};
#line 238 "test_ekf_localization_node_interfaces.c"
typedef struct sensor_msgs_Imu_Pose sensor_msgs_Imu_Pose;
#line 253
#pragma pack(4)
#line 254 "test_ekf_localization_node_interfaces.c"
struct sensor_msgs_Imu_Twist {
   double angular_velocity_x ;
   double angular_velocity_y ;
   double angular_velocity_z ;
   double angular_velocity_covariance[9] ;
   char *header_frame_id ;
   int header_stamp ;
   int header_seq ;
};
#line 254 "test_ekf_localization_node_interfaces.c"
typedef struct sensor_msgs_Imu_Twist sensor_msgs_Imu_Twist;
#line 271
#pragma pack(4)
#line 272 "test_ekf_localization_node_interfaces.c"
struct sensor_msgs_Imu_Acc {
   double linear_acceleration_x ;
   double linear_acceleration_y ;
   double linear_acceleration_z ;
   double linear_acceleration_covariance[9] ;
   char *header_frame_id ;
   int header_stamp ;
   int header_seq ;
};
#line 272 "test_ekf_localization_node_interfaces.c"
typedef struct sensor_msgs_Imu_Acc sensor_msgs_Imu_Acc;
#line 285
#pragma pack(4)
#line 286 "test_ekf_localization_node_interfaces.c"
struct sensor_msgs_Imu {
   double orientation_x ;
   double orientation_y ;
   double orientation_z ;
   double orientation_w ;
   double orientation_covariance[9] ;
   double angular_velocity_covariance[9] ;
   char *header_frame_id ;
   int header_stamp ;
   int header_seq ;
};
#line 286 "test_ekf_localization_node_interfaces.c"
typedef struct sensor_msgs_Imu sensor_msgs_Imu;
#line 304
#pragma pack(4)
#line 305 "test_ekf_localization_node_interfaces.c"
struct ros_Publisher {
   char *topic ;
   int queuesize ;
};
#line 305 "test_ekf_localization_node_interfaces.c"
typedef struct ros_Publisher ros_Publisher;
#line 310
#pragma pack(4)
#line 311 "test_ekf_localization_node_interfaces.c"
struct ros_Subscriber {
   char *topic ;
   int queuesize ;
};
#line 311 "test_ekf_localization_node_interfaces.c"
typedef struct ros_Subscriber ros_Subscriber;
#line 55 "test_ekf_localization_node_interfaces.c"
_Bool stateUpdated_  ;
#line 59 "test_ekf_localization_node_interfaces.c"
double M_PI  =    3.141592;
#line 319
int mystrcmp(char const   *s , char const   *t ) ;
#line 321
void nh_serviceClient(void) ;
#line 323
struct ros_Publisher *nh_advertise(char *topic_name , int queue_size ) ;
#line 324
struct ros_Subscriber *nh_subscribe(char *topic_name , int queue_size ) ;
#line 327
void Duration_sleep(double seconds ) ;
#line 328
void loopRate_sleep(int fq ) ;
#line 329
void publish(char *meta , int size , int sq ) ;
#line 332 "test_ekf_localization_node_interfaces.c"
int mystrcmp(char const   *s , char const   *t ) 
{ 
  int i ;

  {
#line 336
  i = 0;
#line 336
  while ((int const   )*(s + i) == (int const   )*(t + i)) {
#line 338
    if ((int const   )*(s + i) == 0) {
#line 340
      return (0);
    }
#line 336
    i ++;
  }
#line 342
  return ((int const   )*(s + i) - (int const   )*(t + i));
}
}
#line 345 "test_ekf_localization_node_interfaces.c"
void nh_serviceClient(void) 
{ 


  {
#line 346
  return;
}
}
#line 349
extern int ( /* missing proto */  malloc)() ;
#line 348 "test_ekf_localization_node_interfaces.c"
struct ros_Publisher *nh_advertise(char *topic_name , int queue_size ) 
{ 
  struct ros_Publisher *pub ;
  struct ros_Publisher *tmp ;

  {
#line 349
  tmp = (struct ros_Publisher *)malloc(sizeof(ros_Publisher ));
#line 349
  pub = tmp;
#line 351
  pub->topic = topic_name;
#line 352
  pub->queuesize = queue_size;
#line 353
  return (pub);
}
}
#line 356 "test_ekf_localization_node_interfaces.c"
struct ros_Subscriber *nh_subscribe(char *topic_name , int queue_size ) 
{ 
  struct ros_Subscriber *sub ;
  struct ros_Subscriber *tmp ;

  {
#line 357
  tmp = (struct ros_Subscriber *)malloc(sizeof(ros_Subscriber ));
#line 357
  sub = tmp;
#line 362
  sub->topic = topic_name;
#line 363
  sub->queuesize = queue_size;
#line 364
  return (sub);
}
}
#line 367 "test_ekf_localization_node_interfaces.c"
void Duration_sleep(double seconds ) 
{ 
  double sec ;

  {
#line 369
  sec = seconds;
#line 371
  return;
}
}
#line 373 "test_ekf_localization_node_interfaces.c"
void loopRate_sleep(int fq ) 
{ 
  int sleep_fq ;

  {
#line 374
  sleep_fq = 0;
#line 375
  sleep_fq = fq;
#line 391
  return;
}
}
#line 393 "test_ekf_localization_node_interfaces.c"
void publish(char *meta , int size , int sq ) 
{ 
  char *topic_name ;
  int topic_size ;
  int pub_seq ;

  {
#line 396
  topic_name = meta;
#line 397
  topic_size = size;
#line 398
  pub_seq = sq;
#line 429
  return;
}
}
#line 431 "test_ekf_localization_node_interfaces.c"
void resetFilter(void) 
{ 


  {
#line 468
  return;
}
}
#line 568
extern int ( /* missing proto */  free)() ;
#line 477 "test_ekf_localization_node_interfaces.c"
void OdomPoseBasicIOTEST(void) 
{ 
  int pubsize ;
  int seq ;
  nav_msgs_Odometry *odom ;
  struct nav_msgs_Odometry *tmp ;
  int i ;

  {
#line 479
  stateUpdated_ = 0;
#line 480
  pubsize = 0;
#line 481
  seq = 1;
#line 491
  tmp = (struct nav_msgs_Odometry *)malloc(sizeof(nav_msgs_Odometry ));
#line 491
  odom = tmp;
#line 493
  pubsize = (unsigned long )pubsize + sizeof(nav_msgs_Odometry );
#line 535
  i = 0;
#line 535
  while (i < 50) {
#line 541
    publish("odom", pubsize, seq);
#line 547
    loopRate_sleep(50);
#line 550
    seq ++;
#line 535
    i ++;
  }
#line 568
  free(odom);
#line 570
  resetFilter();
#line 571
  return;
}
}
#line 573 "test_ekf_localization_node_interfaces.c"
void OdomTwistBasicIOTEST(void) 
{ 
  int pubsize ;
  int seq ;
  int ind ;
  int i ;

  {
#line 582
  pubsize = 0;
#line 583
  seq = 1;
#line 585
  pubsize = (unsigned long )pubsize + sizeof(nav_msgs_Odometry );
#line 614
  ind = 0;
#line 614
  while (ind < 36) {
#line 614
    ind += 7;
  }
#line 629
  i = 0;
#line 629
  while (i < 400) {
#line 633
    publish("odom", pubsize, seq);
#line 637
    loopRate_sleep(20);
#line 640
    seq ++;
#line 629
    i ++;
  }
#line 657
  i = 0;
#line 658
  i = 0;
#line 658
  while (i < 200) {
#line 662
    publish("odom", pubsize, seq);
#line 666
    loopRate_sleep(20);
#line 669
    seq ++;
#line 658
    i ++;
  }
#line 682
  i = 0;
#line 683
  i = 0;
#line 683
  while (i < 100) {
#line 687
    publish("odom", pubsize, seq);
#line 691
    loopRate_sleep(20);
#line 693
    seq ++;
#line 683
    i ++;
  }
#line 707
  i = 0;
#line 708
  i = 0;
#line 708
  while (i < 100) {
#line 712
    publish("odom", pubsize, seq);
#line 716
    loopRate_sleep(20);
#line 708
    i ++;
  }
#line 735
  i = 0;
#line 736
  i = 0;
#line 736
  while (i < 100) {
#line 740
    publish("odom", pubsize, seq);
#line 744
    loopRate_sleep(20);
#line 747
    seq ++;
#line 736
    i ++;
  }
#line 756
  i = 0;
#line 757
  i = 0;
#line 757
  while (i < 100) {
#line 761
    publish("odom", pubsize, seq);
#line 765
    loopRate_sleep(20);
#line 768
    seq ++;
#line 757
    i ++;
  }
#line 779
  i = 0;
#line 780
  i = 0;
#line 780
  while (i < 100) {
#line 784
    publish("odom", pubsize, seq);
#line 788
    loopRate_sleep(20);
#line 791
    seq ++;
#line 780
    i ++;
  }
#line 805
  return;
}
}
#line 806 "test_ekf_localization_node_interfaces.c"
void PoseBasicIOTEST(void) 
{ 
  int pubsize ;
  int seq ;
  struct geometry_msgs_Pose *pose___0 ;
  struct geometry_msgs_Pose *tmp ;
  int ind ;
  int i ;

  {
#line 808
  pubsize = 0;
#line 813
  seq = 1;
#line 822
  tmp = (struct geometry_msgs_Pose *)malloc(sizeof(geometry_msgs_Pose ));
#line 822
  pose___0 = tmp;
#line 823
  pubsize = (unsigned long )pubsize + sizeof(geometry_msgs_Pose );
#line 844
  ind = 0;
#line 846
  ind = 0;
#line 846
  while (ind < 36) {
#line 846
    ind += 7;
  }
#line 857
  i = 0;
#line 858
  i = 0;
#line 858
  while (i < 50) {
#line 864
    publish("pose", pubsize, seq);
#line 865
    loopRate_sleep(50);
#line 868
    seq ++;
#line 858
    i ++;
  }
#line 887
  return;
}
}
#line 889 "test_ekf_localization_node_interfaces.c"
void TwistBasicIOTEST(void) 
{ 
  int pubsize ;
  int seq ;
  geometry_msgs_Twist *twist___0 ;
  struct geometry_msgs_Twist *tmp ;
  int ind ;
  int i ;

  {
#line 891
  pubsize = 0;
#line 892
  seq = 1;
#line 901
  tmp = (struct geometry_msgs_Twist *)malloc(sizeof(geometry_msgs_Twist ));
#line 901
  twist___0 = tmp;
#line 902
  pubsize = (unsigned long )pubsize + sizeof(geometry_msgs_Twist );
#line 922
  ind = 0;
#line 924
  ind = 0;
#line 924
  while (ind < 36) {
#line 924
    ind += 7;
  }
#line 935
  i = 0;
#line 936
  i = 0;
#line 936
  while (i < 400) {
#line 942
    publish("twist", pubsize, seq);
#line 943
    loopRate_sleep(20);
#line 946
    seq ++;
#line 936
    i ++;
  }
#line 959
  i = 0;
#line 959
  while (i < 200) {
#line 964
    publish("twist", pubsize, seq);
#line 966
    loopRate_sleep(20);
#line 969
    seq ++;
#line 959
    i ++;
  }
#line 982
  i = 0;
#line 982
  while (i < 100) {
#line 988
    publish("twist", pubsize, seq);
#line 989
    loopRate_sleep(20);
#line 992
    seq ++;
#line 982
    i ++;
  }
#line 1006
  i = 0;
#line 1006
  while (i < 100) {
#line 1012
    publish("twist", pubsize, seq);
#line 1014
    loopRate_sleep(20);
#line 1006
    i ++;
  }
#line 1033
  i = 0;
#line 1033
  while (i < 100) {
#line 1038
    publish("twist", pubsize, seq);
#line 1040
    loopRate_sleep(20);
#line 1043
    seq ++;
#line 1033
    i ++;
  }
#line 1052
  i = 0;
#line 1052
  while (i < 100) {
#line 1058
    publish("twist", pubsize, seq);
#line 1059
    loopRate_sleep(20);
#line 1062
    seq ++;
#line 1052
    i ++;
  }
#line 1073
  i = 0;
#line 1073
  while (i < 100) {
#line 1079
    publish("twist", pubsize, seq);
#line 1080
    loopRate_sleep(20);
#line 1083
    seq ++;
#line 1073
    i ++;
  }
#line 1099
  return;
}
}
#line 1101 "test_ekf_localization_node_interfaces.c"
void ImuPoseBasicIOTEST(void) 
{ 
  int pubsize ;
  int seq ;
  struct sensor_msgs_Imu_Pose *imu ;
  struct sensor_msgs_Imu_Pose *tmp ;
  int ind ;
  int i ;
  int imuIgnorepubsize ;
  int seq2 ;
  struct sensor_msgs_Imu_Pose *imuIgnore ;
  struct sensor_msgs_Imu_Pose *tmp___0 ;

  {
#line 1110
  pubsize = 0;
#line 1111
  seq = 1;
#line 1112
  tmp = (struct sensor_msgs_Imu_Pose *)malloc(sizeof(sensor_msgs_Imu_Pose ) + sizeof(double ) * 9UL);
#line 1112
  imu = tmp;
#line 1113
  pubsize = (unsigned long )pubsize + sizeof(sensor_msgs_Imu_Pose );
#line 1128
  ind = 0;
#line 1128
  while (ind < 9) {
#line 1128
    ind += 4;
  }
#line 1142
  i = 0;
#line 1142
  while (i < 50) {
#line 1148
    publish("imu", pubsize, seq);
#line 1149
    loopRate_sleep(50);
#line 1152
    seq ++;
#line 1142
    i ++;
  }
#line 1172
  imuIgnorepubsize = 0;
#line 1173
  seq2 = 1;
#line 1174
  tmp___0 = (struct sensor_msgs_Imu_Pose *)malloc(sizeof(sensor_msgs_Imu_Pose ) + sizeof(double ) * 9UL);
#line 1174
  imuIgnore = tmp___0;
#line 1175
  imuIgnorepubsize = (unsigned long )imuIgnorepubsize + sizeof(sensor_msgs_Imu_Pose );
#line 1189
  i = 0;
#line 1190
  i = 0;
#line 1190
  while (i < 50) {
#line 1194
    publish("imuIgnore", imuIgnorepubsize, seq2);
#line 1196
    loopRate_sleep(50);
#line 1200
    seq2 ++;
#line 1190
    i ++;
  }
#line 1219
  return;
}
}
#line 1220 "test_ekf_localization_node_interfaces.c"
void ImuTwistBasicIOTEST(void) 
{ 
  int pubsize ;
  int seq ;
  struct sensor_msgs_Imu_Twist *imu ;
  struct sensor_msgs_Imu_Twist *tmp ;
  int ind ;
  int i ;
  int imuIgnorepubsize ;
  int seq2 ;
  struct sensor_msgs_Imu_Twist *imuIgnore ;
  struct sensor_msgs_Imu_Twist *tmp___0 ;

  {
#line 1229
  pubsize = 0;
#line 1230
  seq = 1;
#line 1231
  tmp = (struct sensor_msgs_Imu_Twist *)malloc(sizeof(sensor_msgs_Imu_Twist ) + sizeof(double ) * 9UL);
#line 1231
  imu = tmp;
#line 1232
  pubsize = (unsigned long )pubsize + sizeof(sensor_msgs_Imu_Twist );
#line 1241
  ind = 0;
#line 1242
  ind = 0;
#line 1242
  while (ind < 9) {
#line 1242
    ind += 4;
  }
#line 1251
  i = 0;
#line 1252
  i = 0;
#line 1252
  while (i < 50) {
#line 1259
    publish("imu", pubsize, seq);
#line 1260
    loopRate_sleep(50);
#line 1262
    seq ++;
#line 1252
    i ++;
  }
#line 1288
  i = 0;
#line 1288
  while (i < 50) {
#line 1295
    publish("imu", pubsize, seq);
#line 1296
    loopRate_sleep(50);
#line 1298
    seq ++;
#line 1288
    i ++;
  }
#line 1320
  i = 0;
#line 1320
  while (i < 50) {
#line 1327
    publish("imu", pubsize, seq);
#line 1329
    seq ++;
#line 1320
    i ++;
  }
#line 1347
  imuIgnorepubsize = 0;
#line 1348
  seq2 = 1;
#line 1349
  tmp___0 = (struct sensor_msgs_Imu_Twist *)malloc(sizeof(sensor_msgs_Imu_Twist ));
#line 1349
  imuIgnore = tmp___0;
#line 1350
  imuIgnorepubsize = (unsigned long )imuIgnorepubsize + sizeof(sensor_msgs_Imu_Twist );
#line 1365
  i = 0;
#line 1365
  while (i < 50) {
#line 1372
    publish("imuIgnore", imuIgnorepubsize, seq2);
#line 1373
    loopRate_sleep(50);
#line 1375
    seq2 ++;
#line 1365
    i ++;
  }
#line 1393
  return;
}
}
#line 1395 "test_ekf_localization_node_interfaces.c"
void ImuAccBasicIOTEST(void) 
{ 
  int pubsize ;
  int seq ;
  struct sensor_msgs_Imu_Acc *imu ;
  struct sensor_msgs_Imu_Acc *tmp ;
  int i ;
  int imuIgnorepubsize ;
  int seq2 ;
  struct sensor_msgs_Imu_Acc *imuIgnore ;
  struct sensor_msgs_Imu_Acc *tmp___0 ;

  {
#line 1404
  pubsize = 0;
#line 1405
  seq = 1;
#line 1406
  tmp = (struct sensor_msgs_Imu_Acc *)malloc(sizeof(sensor_msgs_Imu_Acc ) + sizeof(double ) * 9UL);
#line 1406
  imu = tmp;
#line 1407
  pubsize = (unsigned long )pubsize + sizeof(sensor_msgs_Imu_Acc );
#line 1430
  i = 0;
#line 1431
  i = 0;
#line 1431
  while (i < 50) {
#line 1438
    publish("imu", pubsize, seq);
#line 1439
    loopRate_sleep(50);
#line 1441
    seq ++;
#line 1431
    i ++;
  }
#line 1456
  i = 0;
#line 1456
  while (i < 50) {
#line 1463
    publish("imu", pubsize, seq);
#line 1464
    loopRate_sleep(50);
#line 1466
    seq ++;
#line 1456
    i ++;
  }
#line 1477
  imuIgnorepubsize = 0;
#line 1478
  seq2 = 1;
#line 1479
  tmp___0 = (struct sensor_msgs_Imu_Acc *)malloc(sizeof(sensor_msgs_Imu_Acc ) + sizeof(double ) * 9UL);
#line 1479
  imuIgnore = tmp___0;
#line 1480
  imuIgnorepubsize = (unsigned long )imuIgnorepubsize + sizeof(sensor_msgs_Imu_Acc );
#line 1494
  i = 0;
#line 1494
  while (i < 50) {
#line 1501
    publish("imuIgnore", imuIgnorepubsize, seq2);
#line 1502
    loopRate_sleep(50);
#line 1504
    seq2 ++;
#line 1494
    i ++;
  }
#line 1517
  return;
}
}
#line 1520 "test_ekf_localization_node_interfaces.c"
void OdomDifferentialIOTEST(void) 
{ 
  int pubsize ;
  int seq ;
  struct nav_msgs_Odometry *odom ;
  struct nav_msgs_Odometry *tmp ;
  int zeroCount ;
  int tmp___0 ;
  int ind ;
  int i ;

  {
#line 1529
  pubsize = 0;
#line 1530
  seq = 1;
#line 1531
  tmp = (struct nav_msgs_Odometry *)malloc(sizeof(nav_msgs_Odometry ));
#line 1531
  odom = tmp;
#line 1532
  pubsize = (unsigned long )pubsize + sizeof(nav_msgs_Odometry );
#line 1561
  zeroCount = 0;
#line 1562
  while (1) {
#line 1562
    tmp___0 = zeroCount;
#line 1562
    zeroCount ++;
#line 1562
    if (! (tmp___0 < 10)) {
#line 1562
      break;
    }
#line 1566
    publish("odom", pubsize, seq);
#line 1578
    Duration_sleep(0.1);
#line 1580
    seq ++;
  }
#line 1584
  ind = 0;
#line 1585
  ind = 0;
#line 1585
  while (ind < 36) {
#line 1585
    ind += 7;
  }
#line 1595
  i = 0;
#line 1596
  i = 0;
#line 1596
  while (i < 100) {
#line 1604
    publish("odom", pubsize, seq);
#line 1607
    loopRate_sleep(20);
#line 1610
    seq ++;
#line 1596
    i ++;
  }
#line 1622
  return;
}
}
#line 1625 "test_ekf_localization_node_interfaces.c"
void PoseDifferentialIOTEST(void) 
{ 
  int pubsize ;
  int seq ;
  struct geometry_msgs_Pose *pose___0 ;
  struct geometry_msgs_Pose *tmp ;
  int zeroCount ;
  int tmp___0 ;
  int ind ;
  int i ;

  {
#line 1628
  pubsize = 0;
#line 1629
  seq = 1;
#line 1638
  tmp = (struct geometry_msgs_Pose *)malloc(sizeof(geometry_msgs_Pose ));
#line 1638
  pose___0 = tmp;
#line 1639
  pubsize = (unsigned long )pubsize + sizeof(geometry_msgs_Pose );
#line 1664
  zeroCount = 0;
#line 1665
  while (1) {
#line 1665
    tmp___0 = zeroCount;
#line 1665
    zeroCount ++;
#line 1665
    if (! (tmp___0 < 10)) {
#line 1665
      break;
    }
#line 1682
    publish("pose", pubsize, seq);
#line 1683
    Duration_sleep(0.1);
#line 1685
    seq ++;
  }
#line 1690
  ind = 0;
#line 1691
  ind = 0;
#line 1691
  while (ind < 36) {
#line 1691
    ind += 7;
  }
#line 1700
  i = 0;
#line 1701
  i = 0;
#line 1701
  while (i < 100) {
#line 1711
    publish("pose", pubsize, seq);
#line 1712
    loopRate_sleep(20);
#line 1715
    seq ++;
#line 1701
    i ++;
  }
#line 1727
  return;
}
}
#line 1730 "test_ekf_localization_node_interfaces.c"
void ImuDifferentialIOTEST(void) 
{ 
  int pubsize ;
  int seq ;
  struct sensor_msgs_Imu *imu ;
  struct sensor_msgs_Imu *tmp ;
  double roll ;
  double pitch ;
  double yaw ;
  int setCount ;
  int tmp___0 ;
  int zeroCount ;
  int tmp___1 ;
  double rollFinal ;
  double pitchFinal ;
  double yawFinal ;
  int i ;

  {
#line 1743
  pubsize = 0;
#line 1744
  seq = 1;
#line 1746
  tmp = (struct sensor_msgs_Imu *)malloc(sizeof(sensor_msgs_Imu ) + sizeof(double ) * 9UL);
#line 1746
  imu = tmp;
#line 1747
  pubsize = (unsigned long )pubsize + sizeof(sensor_msgs_Imu );
#line 1752
  roll = M_PI / 2.0;
#line 1753
  pitch = - M_PI;
#line 1754
  yaw = - M_PI / 4.0;
#line 1766
  setCount = 0;
#line 1767
  while (1) {
#line 1767
    tmp___0 = setCount;
#line 1767
    setCount ++;
#line 1767
    if (! (tmp___0 < 10)) {
#line 1767
      break;
    }
#line 1776
    publish("imu", pubsize, seq);
#line 1777
    publish("imu", pubsize, seq);
#line 1778
    Duration_sleep(0.1);
#line 1780
    seq ++;
  }
#line 1784
  zeroCount = 0;
#line 1785
  while (1) {
#line 1785
    tmp___1 = zeroCount;
#line 1785
    zeroCount ++;
#line 1785
    if (! (tmp___1 < 10)) {
#line 1785
      break;
    }
#line 1793
    publish("imu", pubsize, seq);
#line 1794
    Duration_sleep(0.1);
#line 1796
    seq ++;
  }
#line 1799
  rollFinal = roll;
#line 1800
  pitchFinal = pitch;
#line 1801
  yawFinal = yaw;
#line 1807
  i = 0;
#line 1808
  i = 0;
#line 1808
  while (i < 100) {
#line 1810
    yawFinal -= 0.01 * ((3.0 * M_PI) / 4.0);
#line 1819
    publish("imu", pubsize, seq);
#line 1820
    loopRate_sleep(20);
#line 1823
    seq ++;
#line 1808
    i ++;
  }
#line 1830
  i = 0;
#line 1830
  while (i < 100) {
#line 1832
    rollFinal += 0.01 * (M_PI / 2.0);
#line 1840
    publish("imu", pubsize, seq);
#line 1842
    loopRate_sleep(20);
#line 1845
    seq ++;
#line 1830
    i ++;
  }
#line 1860
  return;
}
}
#line 1863 "test_ekf_localization_node_interfaces.c"
void main(int argc , char **argv ) 
{ 


  {
#line 1876
  OdomPoseBasicIOTEST();
#line 1877
  OdomTwistBasicIOTEST();
#line 1878
  PoseBasicIOTEST();
#line 1879
  TwistBasicIOTEST();
#line 1880
  ImuPoseBasicIOTEST();
#line 1881
  ImuTwistBasicIOTEST();
#line 1882
  ImuAccBasicIOTEST();
#line 1883
  OdomDifferentialIOTEST();
#line 1884
  PoseDifferentialIOTEST();
#line 1885
  ImuDifferentialIOTEST();
#line 1889
  return;
}
}
